plugins {
    id("io.github.gradle-nexus.publish-plugin") version "1.3.0"
    id("se.patrikerdes.use-latest-versions") version "0.2.18"
    id("com.github.ben-manes.versions") version "0.50.0"
}

apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = '2.1.0'
group = 'de.undercouch'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.junitVersion = "5.10.1"

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint"
}

dependencies {
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    testImplementation 'commons-io:commons-io:2.15.1'
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
}

// package javadoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

// package source into a jar file
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

java {
    withJavadocJar()
    withSourcesJar()
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
               name = 'actson'
               packaging = 'jar'
               description = 'A reactive (non-blocking, asynchronous) JSON parser.'
               url = 'https://michelkraemer.com'

               scm {
                   url = 'scm:git:git://github.com/michel-kraemer/actson.git'
                   connection = 'scm:git:git://github.com/michel-kraemer/actson.git'
                   developerConnection = 'scm:git:git://github.com/michel-kraemer/actson.git'
               }

               licenses {
                   license {
                       name = 'The MIT License'
                       url = 'https://opensource.org/licenses/MIT'
                       distribution = 'repo'
                   }
               }

               developers {
                   developer {
                       id = 'michel-kraemer'
                       name = 'Michel Kraemer'
                       email = 'michel@undercouch.de'
                       url = 'https://michelkraemer.com'
                   }
               }
           }
        }
    }
}

// sign all artifacts
signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    // only sign release artifacts and not snapshots
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
